---
import { Image } from "astro:assets";
import Cta from "@/layouts/partials/Cta.astro";
import { getEntryBySlug } from "astro:content";
import { AiFillCheckCircle } from "react-icons/ai";

const how_it_works = await getEntryBySlug("how-it-works-en", "index");
const { perfomance, our_works } = how_it_works.data;
const { title, subtitle } = how_it_works.data;
// const page_data = {
//   ...how_it_works.data,
//   content: how_it_works.body,
// };
---

<section class="lg:px-8">
  <div class="container px-0 lg:pt-16">
    {
      our_works?.map((item: any, index: number) => (
        <div
          class="grid grid-cols-1 lg:grid-cols-2 lg:py-4 lg:gap-8"
          data-key={index}>
          {/* Caja de contenido con el primer gradiente */}
          <div
            class={`flex flex-col bg-gradient-to-t from-[#e6f6ee]/50 to-[#8bcfad]/50 lg:rounded-3xl p-8 lg:p-12 h-full w-full ${index % 2 === 0 ? "lg:order-1" : "lg:order-2"}`}>
            <h5 class="text-base lg:text-xl font-normal text-start text-pretty">
              {item.title}
            </h5>
            <ul class="mt-6 text-dark lg:-ml-4">
              {item.list.map((list: any, listIndex: number) => (
                <li class="mb-2 flex items-center rounded text-base lg:px-4 lg:text-xl">
                  <AiFillCheckCircle className="mr-3 fill-primary text-white" />
                  {list}
                </li>
              ))}
            </ul>
          </div>

          {/* Caja de imagen con el segundo gradiente */}
          <div
            id="card"
            class={`flex-shrink-0 mx-auto  overflow-hidden  from-[#e6f6ee]/50 to-[#8bcfad]/50 w-full h-full lg:rounded-3xl  ${index % 2 === 0 ? "order-2" : "order-1"}`}>
            <button
              class="open-dialog-button hover:cursor-crosshair mx-auto transition bg-black/5 backdrop-blur w-full h-full p-6 hover:shadow-lg"
              data-index={index}>
              <img
                src={item.image}
                alt={`Imagen de ${item.title}`}
                class="mx-auto h-auto rounded-3xl object-cover drop-shadow-lg max-h-[450px] "
              />
            </button>
            {/* Dialog que se abrir√° al hacer click */}
            <dialog
              data-index={index}
              class="dialog w-full h-full m-auto overflow-hidden bg-transparent">
              <aside
                class={`group flex items-center justify-center rounded-3xl mx-auto h-full w-full transition-all bg-black/50 !backdrop-blur gap-4 relative py-4 shadow-2xl shadow-gray-600/10 motion-scale-in-[0.48] motion-translate-x-in-[-1%] motion-translate-y-in-[1%] motion-opacity-in-[0%] motion-blur-in-[5px] motion-duration-[0.35s] motion-duration-[0.53s]/scale motion-duration-[0.53s]/translate`}>
                <button class="close-dialog-button h-8 w-8 absolute top-4 right-4 text-white hover:scale-105 transition close-dialog z-20 ">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor">
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M6 18L18 6M6 6l12 12"
                    />
                  </svg>
                </button>
                <img
                  src={item.image}
                  alt={`Imagen ampliada de ${item.title}`}
                  class="rounded-3xl max-h-full w-auto "
                />
              </aside>
            </dialog>
          </div>
        </div>
      ))
    }
  </div>
</section>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    document.addEventListener("click", (event) => {
      const target = event.target.closest("button");

      if (!target) return;

      if (target.matches(".open-dialog-button")) {
        const index = target.dataset.index;
        const dialog = document.querySelector(`dialog[data-index="${index}"]`);
        if (dialog) dialog.showModal();
      }

      if (target.matches(".close-dialog-button")) {
        const dialog = target.closest("dialog");
        if (dialog) dialog.close();
      }
    });
  });
</script>

<section class="page-hero my-32 px-0">
  <div class="container">
    <div class="mx-auto text-center"></div>
    <div class="flex-wrap grid gap-8 lg:grid-cols-3">
      {
        perfomance?.map((item: any, i: number) => (
          <div
            id="card"
            class={`relative flex flex-col justify-between rounded-xl overflow-hidden bg-white shadow-lg  ${
              perfomance.length - 1 !== i
                ? "after:absolute after:-right-4 after:-z-[1] after:hidden after:w-full after:translate-x-full after:border-b-2 after:border-dashed after:border-primary/50 after:content-[''] md:after:block"
                : undefined
            }`}>
            {/* Contenedor de imagen y contenido */}
            <div class="flex flex-col h-full">
              <Image
                width={400}
                height={400}
                src={item.image}
                alt=""
                class="w-full rounded-t-md object-cover h-[250px] object-center"
              />
              <div class="p-8  text-center h-full">
                <h4 class="h4 pb-4 text-start">{item.title}</h4>
                <p class="text-sm text-pretty !text-black/50 text-start">
                  {item.description}
                </p>
              </div>
            </div>
          </div>
        ))
      }
    </div>
  </div>
</section>

<style>
  #card {
    animation: reveal2 linear both;
    animation-timeline: view();
    animation-range: entry 10% cover 30%;
  }
  @keyframes reveal2 {
    0% {
      opacity: 0;
      transform: translateY(25%) scale(0.95);
    }
    100% {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }
</style>
